#+TITLE: 插件开发之本地存储及缓存

chrome, safari, opera 的插件都提供 localStorage，但是 firefox 中不提供。
当然，少量选项存储可以用 [[https://developer.mozilla.org/en/XUL_School/Handling_Preferences][Preferences]] 解决，但是对于大数据量的存储，还是单独的存储比较合适。
firefox 中插件可以使用 sqlite 实现数据持续存储，接口我就不详细描述了，参考 [[https://developer.mozilla.org/en/Storage][Storage]] 这篇文档。
根据这个接口，我在 firefox 中实现了一个与 [[http://code.google.com/p/ywb-codes/source/browse/trunk/ext/lib/src/firefox/sqlite-storage.js][localStorage 兼容的模块]]。
好了，至少现在所有浏览器都是可以实现本地存储了。我们来看看使用本地存储的场景。

我会把用户设置的选项，插件运行相关信息（如版本号，用户UID等），ajax 缓存，及业务数据保存在本地存储中。
当然你可以这样：
#+BEGIN_SRC js
storage.set('extension_version', '1.0.0');
storage.set('options_setting1', $val);
// ...
storage.set('options_setting2', $val);
storage.set('cache_item1', $val);
// ...
storage.set('cache_itemn', $val);
storage.set('entry_name1', $val);
// ...
storage.set('entry_namen', $val);
#+END_SRC

但是我更希望自动处理名字空间，例如：
#+BEGIN_SRC js
var extension = new storage('extension');
extension.set('version', '1.0.0');
var options = new storage('options');
options.set('setting1', $val);
// ...
options.set('setting2', $val);
var cache = new storage('cache');
cache.set('item1', $val);
// ...
cache.set('itemn', $val);
var biz = new storage('entry');
biz.set('entry_name1', $val);
// ...
biz.set('entry_namen', $val);
#+END_SRC

还有缓存或存储业务数据通常是复杂的数据结构，而 localStorage 只能保存字符串信息，所以我们还要一个接口自动序列化和反序列化：
#+BEGIN_SRC js
storage.set_object('key', {name: 'value'});
var data = storage.get_storage('key');
#+END_SRC

有时我们会面临一个问题是需要遍历所有存储的数据，比如缓存需要定期进行清除操作。所以还需要一个遍历接口 =storage.each(callback)= 。

所以这是 storage 类的接口：
 - storage(namespace, backend) :: 构造函数，字符串 namespace 是名字空间，backend 是使用的存储类型，比如 localStorage 还是 SqliteStorage
 - has(key) :: 检查是否存在 key 对应的值
 - get(key) :: 返回 key 对应的值。如果值不存在返回 null
 - set(key, value) :: 设置 key 对应的值。value 必须是字符串
 - remove(key) :: 删除 key 对应的值
 - has_object(key) :: 检查是否存在 key 对应的值
 - get_object(key) :: 返回 key 对应的值。如果值不存在，或 JSON 解析出错都将返回 null
 - set_object(key, value) :: 设置 key 对应的值。value 可以是任意能 JSON 序列值的对象
 - remove_object(key) :: 删除 key 对应的值
 - each(callback) :: 对所有 key/value 对执行 callback 函数。callback 函数参数为 key 和 value
 - clear() :: 清空所有 key/value 对

为了让插件中代码一致，我并不是直接构造 storage 对象，而是使用 factory 类方法来构造这个对应。这个 factory 实现很简单：
#+BEGIN_SRC js
if ( !exports ) var exports = {};

(function(S, undefined) {
S.factory = {
    init: function(options) {
        this.storage = options.storage;
    },

    getStorage: function(namespace) {
        // @import storage
        return new exports.storage(namespace, this.storage);
    }
};
})(exports);

var EXPORTED_SYMBOLS = ["exports"];
#+END_SRC

使用例子：
#+BEGIN_SRC js
var S = exports;
// @if chrome,safari,opera
S.factory.init({});
// @endif
// @if firefox
// @import sqlite-storage
S.SqliteStorage.init({file: 'myextension.sqlite'});
S.factory.init({storage: S.SqliteStorage});
// @endif
var options = S.factory.getStorage('options');
#+END_SRC

有了 storage 这个利器，我们就可以考虑一下实现 cache 类。cache 类的接口如下：
 - cache(options) :: 构造函数。
 - has(key) :: 检查 key 对应的缓存是否存在
 - get(key) :: 返回 key 对应的缓存项。如果不存在返回 null
 - set(key, value, options) :: 设置 key 对应的缓存项。value 可以是任意可以序列化的对象。options 目前只支持 expire_time 参数。
 - remove(key) :: 移除 key 对应的缓存项
 - clear() :: 清除所有缓存

构造函数中的 options 可设置的选项包括：
 - max_size :: 缓存最大容量，当缓存项数量超过这个值时，会执行清除操作。默认是 50。
 - fill_factor :: 缓存清除时保留比例。当缓存容量超过 max_size 时并不会清除所有缓存项，而会保留一定比例的缓存项。默认是 0.62。
 - expire_time :: 过期时间，单位为秒。默认是 3600，也就是两小时后过期。
 - storage :: storage 对象。

因为缓存对象可以用单例实现，所以实际代码中，我也是用 factory 类实现：
#+BEGIN_SRC js
(function(S, undefined) {
var cache;
S.factory = {
    getCache: function() {
        if ( !cache ) {
            // @import cache
            cache = new S.cache({ storage: S.factory.getStorage('cache') });
        }
        return cache;
    }
};
})(exports);
#+END_SRC

storage, cache 实现可以从[[http://code.google.com/p/ywb-codes/source/browse/trunk/ext/lib/][我的 google code 中]]找到.
